House Robber

class Solution {
    public static int com_amount(int nums[],int dp[],int n,int idx){
        if(idx>=n){
            return 0;
        }
        if(dp[idx]!=-1){
            return dp[idx];
        }
        int rob = nums[idx]+com_amount(nums,dp,n,idx+2);
        int no_rob = com_amount(nums,dp,n,idx+1);
        return dp[idx]=Math.max(rob,no_rob);
    }
    public int rob(int[] nums) {
        int n = nums.length;
        int dp[] = new int[n+1];
        Arrays.fill(dp,-1);
        return com_amount(nums,dp,n,0);
    }
}

Unique Path

class Solution {
    public static int helper(int er,int ec,int dp[][]){
        for(int i=dp.length-2;i>=0;i--){
            for(int j=dp[0].length-2;j>=0;j--){
                if(i==dp.length-2 && j==dp[0].length-2){
                    dp[i][j]=1;
                    continue;
                }
                int first = dp[i+1][j];
                int second =  dp[i][j+1];
                dp[i][j] = first + second;
            }
        }
        return dp[0][0];
    }
    public int uniquePaths(int m, int n) {
        int dp[][] = new int[n+1][m+1];
        return helper(n-1,m-1,dp);
    }
}

Maximum subarray sum

class Solution {
    public int maxSubArray(int[]arr) {
        int sum=0;
        int max =Integer.MIN_VALUE;
        int n = arr.length;
        for(int i=0;i<n;i++){
            sum+=arr[i];
            max = Math.max(max,sum);
            if(sum<0){
                sum=0;
            }
        }
        return max;
    }
}
