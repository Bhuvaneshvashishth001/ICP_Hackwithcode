Remove Duplicate from sorted list

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head == null || head.next==null){
            return head;
        }
        ListNode slow =head;
        ListNode fast = head.next;
        while(fast!=null){
            if(slow.val == fast.val){
                fast=fast.next;
            }
            else{
                slow.next=fast;
                slow=slow.next;
                fast=fast.next;
            }
        }
        slow.next=null;
        return head;
    }
}


2 Reoder List 

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        if(head == null || head.next==null){
            return;
        }
        ListNode slow = head;
        ListNode fast = head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        ListNode second = slow.next;
        slow.next=null; 
        ListNode prev =null;
        ListNode temp=second;
        while(temp!=null){
            ListNode next = temp.next;
            temp.next=prev;
            prev=temp;
            temp=next;
        }
        ListNode fir = head;
        ListNode sec = prev;
        while(sec!=null){
            ListNode temp1 = fir.next, temp2 = sec.next;
            fir.next=sec;
            sec.next=temp1;
            fir=temp1;
            sec=temp2;
        } 
    }
}

3 Plindrome Linked List

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reversell(ListNode slow){
        ListNode prev=null;
        ListNode curr=slow;
        ListNode next;
        while(curr!=null){
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    public boolean isPalindrome(ListNode head) {
        ListNode slow =head;
        ListNode fast =head;
        while(fast.next!=null && fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        } 
        ListNode newhead = reversell(slow);
        ListNode first= head;
        ListNode second = newhead;
        while(second!=null && first!=slow.next){
            if(first.val != second.val){
                reversell(newhead);
                return false;
            }
            first=first.next;
            second=second.next;
        }
        reversell(newhead);
        return true;
    }
}
