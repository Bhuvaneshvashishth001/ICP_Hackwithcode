Word search 

class Solution {
    public static boolean isValid(int sr,int sc,int n ,int m,char board[][],String word,int idx,int visited[][]){
        if(sr<0 || sr>=n || sc<0 || sc>=m || board[sr][sc]!=word.charAt(idx) || visited[sr][sc]==1){
            return false;
        }
        return true;
    }
    public static boolean helper(int sr,int sc,int er,int ec,int idx,char[][] board,String word,int visited[][]){
        if(idx == word.length()-1){
            return board[sr][sc] == word.charAt(idx);
        }
        int dr[]= {-1,0,0,1};
        int dc[]= {0,-1,1,0};
        visited[sr][sc]=1;
        for(int i=0;i<4;i++){
            int new_r=sr+dr[i];
            int new_c=sc+dc[i];
            if(isValid(new_r,new_c,er,ec,board,word,idx+1,visited)){
                if(helper(new_r,new_c,er,ec,idx+1,board,word,visited)){
                    return true;
                }
            }
        }
        visited[sr][sc]=0;
        return false;
    }
    public boolean exist(char[][] board, String word) {
        int n = board.length;
        int m = board[0].length;
        int visited[][] = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j] == word.charAt(0)){
                    if(helper(i,j,n,m,0,board,word,visited)){
                        return true;
                    }
                }
            }
        }
        return false;
    }
}

combination sum ii 

class Solution {
    public static void combine(int arr[],int target,List<List<Integer>> list,List<Integer> list1,int idx){
        if(target ==0 ){
            list.add(new ArrayList<>(list1));
            return;
        }
        for(int i=idx ;i<arr.length ;i++){
            if(i>idx && arr[i] ==arr[i-1]){
                continue;
            }
            if(arr[i]>target){
                break;
            }
            list1.add(arr[i]);
            combine(arr,target-arr[i],list,list1,i+1);
            list1.remove(list1.size()-1);
        }
    }
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> list = new ArrayList<>();
        List<Integer> list1 = new ArrayList<>();
        combine(candidates,target,list,list1,0);
        return list;
    }
}

combination sum

class Solution {
    public static void helper(int arr[],int target,List<Integer> list,List<List<Integer>> list1,int idx){
        if(idx==arr.length){
            if(target==0){
                list1.add(new ArrayList<>(list));
            }
            return;
        }
        if(arr[idx]<=target){
            list.add(arr[idx]);
            helper(arr,target-arr[idx],list,list1,idx);
            list.remove(list.size()-1);
        }
        helper(arr,target,list,list1,idx+1);
    }
    public List<List<Integer>> combinationSum(int[] arr, int target) {
        List<Integer> list = new ArrayList<>();
        List<List<Integer>> list1 = new ArrayList<>();
        helper(arr,target,list,list1,0);
        return list1;
    }
}

combination sum
